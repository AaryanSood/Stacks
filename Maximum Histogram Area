#include <bits/stdc++.h>
using namespace std;
int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }

    stack<pair<int, int>> NSL;
    stack<pair<int, int>> NSR;
    vector<int> nsl;
    vector<int> nsr;

    for(int i=0; i<n; i++){
        if(NSL.size() == 0){
            nsl.push_back(-1);
        }
        else if(NSL.size()>0 && NSL.top().first<arr[i]){
            nsl.push_back(NSL.top().second);
        }
        else if(NSL.size()>0 && NSL.top().first>=arr[i]){
            while(NSL.size()>0 && NSL.top().first>=arr[i])
                NSL.pop();
            if(NSL.size()==0)
                nsl.push_back(-1);
            else
                nsl.push_back(NSL.top().second);
        }

        NSL.push(make_pair(arr[i], i));
    }

    for(int i=n-1; i>=0; i--){
        if(NSR.size() == 0){
            nsr.push_back(n);
        }
        else if(NSR.size()>0 && NSR.top().first<arr[i]){
            nsr.push_back(NSR.top().second);
        }
        else if(NSR.size()>0 && NSR.top().first>=arr[i]){
            while(NSR.size()>0 && NSR.top().first>=arr[i])
                NSR.pop();
            if(NSR.size() == 0)
                nsr.push_back(n);
            else
                nsr.push_back(NSR.top().second);
        }

        NSR.push(make_pair(arr[i], i));
    }

    vector<int> width;
    int max_ = INT_MIN;
    reverse(nsr.begin(), nsr.end());
    for(int i=0; i<n; i++){
        width.push_back(nsr[i]-nsl[i]-1);
        max_ = max(max_, width[width.size()-1]*arr[i]);
    }
    
    cout<<max_;
    return 0;
}
